function decimalToHexadecimal(number: number) :: string:
    return ("00" if {_number} <= 0, else ("FF")) if {_number} is not between 0 and 255
    return join (character at (mod((floor({_number} / 16)), 16) + 1) in "0123456789ABCDEF") and (character at ((mod({_number}, 16)) + 1) in "0123456789ABCDEF")


function hslToRgb(h: number, s: number, l: number) :: vector:
    set {_h} to {_h}/360
    if {_s} = 0:
        set {_r}, {_g} and {_b} to {_l}
    else:
        set {_q} to (({_l} * ({_s} + 1)) if {_l} < 0.5, else ({_l} + {_s} - {_l} * {_s}))
        set {_p} to (2 * {_l}) - {_q}
        set {_r} to hueToRgb({_p}, {_q}, {_h} + 1 / 3)
        set {_g} to hueToRgb({_p}, {_q}, {_h})
        set {_b} to hueToRgb({_p}, {_q}, {_h} - 1 / 3)
    return vector(round(min(255, (255 * {_r}))), round(min(255, (255 * {_g}))) and round(min(255, (255 * {_b}))))


function hueToRgb(p: number, q: number, t: number) :: number:
    add 1 to {_t} if {_t} < 0
    remove 1 from {_t} if {_t} > 1
    return {_p} + ({_q} - {_p}) * 6 * {_t} if {_t} < 1 / 6
    return {_q} if {_t} < 1/2
    return {_p} + ({_q} - {_p}) * (2 / 3 - {_t}) * 6 if {_t} < 2 / 3
    return {_p}


function linearGradient(s: vector, e: vector, p: number) :: vector:
    set {_p} to max(0, min(1, {_p}))

    set {_dif_r} to abs(x of {_s} - x of {_e})
    if x of {_s} is greater than x of {_e}:
        set {_r} to x of {_s} - ({_dif_r} * {_p})
    else:
        set {_r} to x of {_s} + ({_dif_r} * {_p})

    set {_dif_g} to abs(y of {_s} - y of {_e})
    if y of {_s} is greater than y of {_e}:
        set {_g} to y of {_s} - ({_dif_g} * {_p})
    else:
        set {_g} to y of {_s} + ({_dif_g} * {_p})

    set {_dif_b} to abs(z of {_s} - z of {_e})
    if z of {_s} is greater than z of {_e}:
        set {_b} to z of {_s} - ({_dif_b} * {_p})
    else:
        set {_b} to z of {_s} + ({_dif_b} * {_p})

    return vector({_r}, {_g}, {_b})


function vectorRgbToHex(v: vector) :: text:
    return "%decimalToHexadecimal(x of {_v})%%decimalToHexadecimal(y of {_v})%%decimalToHexadecimal(z of {_v})%"


function applyColorCodes(text: texts) :: texts:
    set {_apply::*} to "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e" and "f"
    loop {_apply::*}:
        replace all "&%loop-value%" with "ยง%loop-value%" in {_text::*}
    return {_text::*}


function applyTextFormats(text: texts) :: texts:
    set {_apply::*} to "n", "m", "l", "o", "k" and "r"
    loop {_apply::*}:
        replace all "&%loop-value%" with "ยง%loop-value%" in {_text::*}
    return {_text::*}